// m = I
function idMatrix(m) {
    m.push(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
}

function mulM(m, k) {
    return [m[0] * k[0] + m[1] * k[4] + m[2] * k[8] + m[3] * k[12],
        m[0] * k[1] + m[1] * k[5] + m[2] * k[9] + m[3] * k[13],
        m[0] * k[2] + m[1] * k[6] + m[2] * k[10] + m[3] * k[14],
        m[0] * k[3] + m[1] * k[7] + m[2] * k[11] + m[3] * k[15],
        m[4] * k[0] + m[5] * k[4] + m[6] * k[8] + m[7] * k[12],
        m[4] * k[1] + m[5] * k[5] + m[6] * k[9] + m[7] * k[13],
        m[4] * k[2] + m[5] * k[6] + m[6] * k[10] + m[7] * k[14],
        m[4] * k[3] + m[5] * k[7] + m[6] * k[11] + m[7] * k[15],
        m[8] * k[0] + m[9] * k[4] + m[10] * k[8] + m[11] * k[12],
        m[8] * k[1] + m[9] * k[5] + m[10] * k[9] + m[11] * k[13],
        m[8] * k[2] + m[9] * k[6] + m[10] * k[10] + m[11] * k[14],
        m[8] * k[3] + m[9] * k[7] + m[10] * k[11] + m[11] * k[15],
        m[12] * k[0] + m[13] * k[4] + m[14] * k[8] + m[15] * k[12],
        m[12] * k[1] + m[13] * k[5] + m[14] * k[9] + m[15] * k[13],
        m[12] * k[2] + m[13] * k[6] + m[14] * k[10] + m[15] * k[14],
        m[12] * k[3] + m[13] * k[7] + m[14] * k[11] + m[15] * k[15]
    ];
}
//m * k = m
function mulMatrix(m, k) {
    var temp = mulM(m, k);
    for (var i = 0; i < 16; i++)
        m[i] = temp[i];
}

// m * k = r
function mulStore(r, m, k) {
    var temp = mulM(m, k);
    for (var i = 0; i < 16; i++)
        r[i] = temp[i];
}
// m * v = rm 
function mulMatrixVec(rv, m, v) {
    var temp = [v[0] * m[0] + v[1] * m[4] + v[2] * m[8] + v[3] * m[12],
        v[0] * m[1] + v[1] * m[5] + v[2] * m[9] + v[3] * m[13],
        v[0] * m[2] + v[1] * m[6] + v[2] * m[10] + v[3] * m[14],
        v[0] * m[3] + v[1] * m[7] + v[2] * m[11] + v[3] * m[15]
    ];
    for (var i = 0; i < 4; i++)
        rv[i] = temp[i];
}